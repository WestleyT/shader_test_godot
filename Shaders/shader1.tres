[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float effectPower = 6.0;
const float pi = 3.14159;

void fragment() {
	vec2 position = UV;
	float distToCenter = distance(position, vec2(0.5, 0.5));
	float rotation_index = effectPower * distToCenter * pi;
	//float rotation_index = 6.0 * distToCenter * pi * sin(TIME/20.0); //6 is rotation speed
	
	position -= vec2(0.5, 0.5);
	
	mat2 rotation_matrix = mat2(vec2(sin(rotation_index), -cos(rotation_index)), vec2(cos(rotation_index), sin(rotation_index)));
	position *= rotation_matrix;
	
	position += vec2(0.5, 0.5);
	
	COLOR = texture(TEXTURE, position);
}

//void vertex() {
//	//VERTEX += vec2(10.0, 10.0);
//	VERTEX.x += cos(TIME * time_factor + VERTEX.x + VERTEX.y) * amplitude.x;
//	VERTEX.y += sin(TIME * time_factor + VERTEX.y + VERTEX.x) * amplitude.y;
//	
//}"

[resource]
shader = SubResource( 1 )
shader_param/effectPower = 0.0
